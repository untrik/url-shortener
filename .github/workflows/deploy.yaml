name: Deploy App

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to deploy'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      HOST: root@185.161.64.187
      DEPLOY_DIRECTORY: /root/apps/url-shortener

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag }}

      # Ничего локально не собираем — всё соберётся на сервере docker'ом
      - name: Prepare SSH key
        env:
          DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
        run: |
          printf '%s\n' "$DEPLOY_SSH_KEY" > deploy_key.pem
          chmod 600 deploy_key.pem

      - name: Ensure Docker & Compose on server
        run: |
          ssh -i deploy_key.pem -o StrictHostKeyChecking=no ${{ env.HOST }} bash <<'SH'
          set -e
          apt-get update
          apt-get install -y ca-certificates curl gnupg
          install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          chmod a+r /etc/apt/keyrings/docker.gpg
          . /etc/os-release
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $VERSION_CODENAME stable" > /etc/apt/sources.list.d/docker.list
          apt-get update
          apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          systemctl enable --now docker
          docker --version
          docker compose version
          SH

      - name: Rsync repo to server
        run: |
          ssh -i deploy_key.pem -o StrictHostKeyChecking=no ${{ env.HOST }} "mkdir -p ${{ env.DEPLOY_DIRECTORY }}"
          rsync -az --delete -e "ssh -i deploy_key.pem -o StrictHostKeyChecking=no" \
            --exclude '.git' \
            ./ ${{ env.HOST }}:${{ env.DEPLOY_DIRECTORY }}/

      - name: Write .env on server (secrets)
        env:
          AUTH_PASS: ${{ secrets.AUTH_PASS }}
        run: |
          ssh -i deploy_key.pem -o StrictHostKeyChecking=no ${{ env.HOST }} "\
            cd ${{ env.DEPLOY_DIRECTORY }} && \
            printf 'HTTP_SERVER_PASSWORD=%s\n' '${AUTH_PASS}' > .env && \
            chmod 600 .env"

      - name: Compose up (build & run)
        run: |
          ssh -i deploy_key.pem -o StrictHostKeyChecking=no ${{ env.HOST }} "\
            cd ${{ env.DEPLOY_DIRECTORY }} && \
            docker compose --env-file .env up -d --build && \
            docker compose ps && \
            docker compose logs -n 50 backend || true"

